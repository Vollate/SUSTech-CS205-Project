execute_process(COMMAND sh -c "uname -m | tr -d '\n'" OUTPUT_VARIABLE ARCHITECTURE)
execute_process(COMMAND sh -c "lscpu|grep -o \"avx512\" | tr -d '\n'" OUTPUT_VARIABLE AVX512_SUPPORT)
execute_process(COMMAND sh -c "lscpu|grep -o \"avx_vnni\" | tr -d '\n'" OUTPUT_VARIABLE AVX_VNNI_SUPPORT)
execute_process(COMMAND sh -c "lscpu|grep -o \"avx2\" | tr -d '\n'" OUTPUT_VARIABLE AVX2_SUPPORT)
execute_process(COMMAND sh -c "lscpu|grep -o \"avx\" | tr -d '\n'" OUTPUT_VARIABLE AVX_SUPPORT)
execute_process(COMMAND sh -c "lscpu|grep -o \"asimd\" | tr -d '\n'" OUTPUT_VARIABLE ASIMD_SUPPORT)
execute_process(COMMAND sh -c "lscpu|grep \"NUMA node0 CPU(s):\"|tr -d \"NUMA node0 CPU(s) : \n -\"" OUTPUT_VARIABLE CPU_CORES)
execute_process(COMMAND sh -c "lscpu|grep \"L2\"|perl -pe \"s/L2 cache://\"|tr -d \"MiB instances \n\"|perl -pe \"s/\([^1-9][^ ][^ ]\)//\"" OUTPUT_VARIABLE CPU_L2CACHE)
execute_process(COMMAND sh -c "lscpu|grep \"L1d\"|perl -pe \"s/L1d cache://\"|tr -d \"KiB instances \n\"|perl -pe \"s/\([^1-9][^ ][^ ][^ ]\)//\"" OUTPUT_VARIABLE CPU_L1CACHE)

add_definitions(-DCORES_NUM=${CPU_CORES}+1)
add_definitions(-DL1CACHE=\(${CPU_L1CACHE}*1024\))
add_definitions(-DL2CACHE=\(${CPU_L2CACHE}*1024*1024\))

message(STATUS "Current architecture: ${ARCHITECTURE}")
if(${ARCHITECTURE} STREQUAL "x86_64" OR ${ARCHITECTURE} STREQUAL "x86_32")
  add_definitions(-D__X86__)
  if(NOT ${AVX512_SUPPORT} STREQUAL "")
    message(STATUS "Use SIMD AVX-512")
    add_compile_options(-mavx512f -mavx512cd)
  elseif(NOT ${AVX_VNNI_SUPPORT} STREQUAL "")
    message(STATUS "Use SIMD: AVX_VNNI")
    add_compile_options(-mavxvnni -mavx2)
  elseif(NOT ${AVX2_SUPPORT} STREQUAL "")
    message(STATUS "Use SIMD: AVX2")
    add_compile_options(-mavx2)
  elseif(NOT ${AVX_SUPPORT} STREQUAL "")
    message(STATUS "Use SIMD: AVX")
    add_compile_options(-mavx)
  else()
    add_definitions(-D__NO_SIMD__)
    message("You CPU doesn't support proper SIMD")
  endif()
elseif(${ARCHITECTURE} STREQUAL "aarch64")
  add_definitions(-D__ARM__)
  if(NOT ${ASIMD_SUPPORT} STREQUAL "")
    message(STATUS "Use SIMD: ASIMD")
    add_compile_options(-ftree-vectorize)
  else()
    add_definitions(-D__NO_SIMD__)
    message("You CPU doesn't support proper SIMD")
  endif()
endif()

find_package(OpenMP)
if(OpenMP_FOUND)
  add_definitions(-D__OPENMP__)
else()
  message(STATUS "OPENMP: Not Available")
endif()
